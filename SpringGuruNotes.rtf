{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 Helvetica;
\f3\fswiss\fcharset0 Helvetica-Bold;\f4\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red173\green169\blue32;
\red32\green32\blue32;\red153\green168\blue186;\red197\green195\blue255;\red88\green118\blue71;\red191\green100\blue38;
\red133\green96\blue154;\red70\green137\blue204;\red23\green23\blue23;\red202\green202\blue202;\red67\green192\blue160;
\red140\green211\blue254;\red173\green169\blue32;\red32\green32\blue32;\red153\green168\blue186;\red197\green195\blue255;
\red88\green118\blue71;\red191\green100\blue38;\red133\green96\blue154;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\csgenericrgb\c67843\c66275\c12549;
\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c77255\c76471\c100000;\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;
\csgenericrgb\c52157\c37647\c60392;\cssrgb\c33725\c61176\c83922;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;\cssrgb\c30588\c78824\c69020;
\cssrgb\c61176\c86275\c99608;\csgenericrgb\c67843\c66275\c12549;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c77255\c76471\c100000;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c52157\c37647\c60392;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 \cb3 application.properties
\f1\b0 \
spring.h2.console.enabled=true\cf3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2 \cf0 \cb1 \

\f3\b url to h2-console
\f2\b0 \
http://localhost:8080/h2-console\
\

\f3\b Connection String
\f2\b0 \
jdbc:h2:mem:testdb\
\

\f3\b Start Spring Boot from Command Line
\f2\b0 \
./mvnw spring-boot:run\
\
./mvnw spring-boot:run \'97debug\
\

\f3\b Model
\f2\b0 \
@Entity - Makes it a database table\
\

\f3\b Controller
\f2\b0 \
@Controller - Specifies that this is a controller object\
@RequestMapping - Mapping for Controller request (GET, PUT, POST, DELETE)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf2 \cb3 \
import org.springframework.ui.Model - Model is used to addAttributes \
to the controller and make calls to the service\
for example: \
model.addAttribute(\'93books\'94, bookRepository.findAll());\cf3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2 \cf3 \

\f3\b \cf2 Generic
\f2\b0 \cf0 \cb1 \
@Component - Specifies that it\'92s a generic bean?\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f3\b \cf0 Thymeleaf\

\f2\b0 Goes in main/resources/templates\
\
\
Use 
\f3\b Issues 
\f2\b0 page on Github to regulate change of code. Keeps track of previous work and things that need to be accomplished by the team\
\

\f3\b @
\f2\b0 Qualifier Specify which bean you want to use when multiple could be autowired\
@Primary - Based on different profiles\
Active profiles are set with the spring.profiles.active=<name-of-profile> in the applicaiton.properties file\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Spring Bean Life Cycle??? \
?????\
InitializingBean\
DesposableBean\
??????\
\
?????\
@PostConstruct\
@PreDestroy\
?????\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
**Generaly specify that a object is autowired and pass it in through constructor injection\
\
\
?????\
SOLID Principles\
?????\
\
** Github tip \'93closes #1\'94 closes the issue #1 on github\
\
in main pom.xml\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf2 \cb3 <build>\
    <plugins>\
        <plugin>\
            <groupId>org.springframework.boot</groupId>\
            <artifactId>spring-boot-maven-plugin</artifactId>\
        </plugin>\
\
        <plugin>\
            <groupId>org.apache.maven.plugins</groupId>\
            <artifactId>maven-release-plugin</artifactId>\
            <configuration>\
                <goals>install</goals>\
            </configuration>\
        </plugin>\
    </plugins>\
</build>\
\
<scm>\
    <developerConnection>scm:git:https://github.com/uoflCoder/sfg-pet-clinic.git</developerConnection>\
</scm>\
\
\
<!\'97 THIS DIDN\'92T WORK SPENT TOO MUCH TIME MOVING ON FOR NOW \'97>\
Then from terminal:\
\
mvn release:prepare\
\
Serializable??? what is it?\

\f0\b \
Services should have an interface!!!!
\f1\b0 \
\

\f0\b Use Java Configuration\
\
Available stereotypes\

\f1\b0 @Component, \
|\
v\
@Controller, @Repository, @Service,\
|\
v\
@RestController (@Controller/@Response Body combined)\

\f0\b \
Use this if some of your packages are outside of your package to add other packages\
@ComponentScan(basePackages = \{"guru.services\'94, \'93guru.springframework\'94\})\

\f1\b0 \
@Configuration\
@Bean\
\
**Spring Boot Configuration Demo (Skipped 5.9)\
\
Singleton - one for the entire instance of the applciation\
Prototype - one for every object calling it\
\
\
Pass by value Java configuration example\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 @Configuration\
@PropertySource("classpath:datasource.properties")\
public class PropertyConfig\
\{\
\
    @Value("$\{guru.user\}")\
    String user;\
    @Value("$\{guru.password\}")\
    String password;\
    @Value("$\{guru.dburl\}")\
    String url;\
\
    @Bean\
    public FakeDataSource fakeDataSource()\
    \{\
        FakeDataSource fakeDataSource = new FakeDataSource();\
\
        fakeDataSource.setUser(user);\
        fakeDataSource.setPassword(password);\
        fakeDataSource.setUrl(url);\
\
        return fakeDataSource;\
    \}\
\
    @Bean\
    public static PropertySourcesPlaceholderConfigurer properties()\
    \{\
        PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer();\
\
        return propertySourcesPlaceholderConfigurer;\
    \}\
\
\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf4 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 Don\'92t need PropertySourcesPlaceholderConfigurer if using application.properties\cf4 \
\
\cf2 //Can use this instead\
@PropertySources(\{\
        @PropertySource("classpath:datasource.properties"),\
        @PropertySource("classpath:jms.properties")\
\})\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \
@Autowired\
Environment env\
\
env.getProperty(\'93<property-name>\'94);\
\
Or\'85 can use environment variables in edit configuration\
\
YAML (Yet Another Markup Language)\
\
Initialize Sets and Lists when declared in class because these are of abstract type\
\
Forking in Github\
\
help.github.com/articles/fork-a-repo\
Copy of history in your repository\
\
@Id\
@GeneratedValue(strategy=GenerationType.IDENTITY)\
\
@Enumerated(value=EnumType.STRING)\
\
@OneToOne\
One source object to one destination object\
\
@OneToMany\
One source object to many destination object\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf4 \cb5 @OneToMany\cf6 (\cf7 mappedBy \cf6 = \cf8 "recipe"\cf9 , \cf7 cascade \cf6 = CascadeType.
\f4\i \cf10 ALL
\f1\i0 \cf6 )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \cb3 \
\
@ManyToOne\
Many of source object to one of destination object\
\
@ManyToMany\
Many of source object to Many of Destination object\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf4 \cb5 @ManyToMany\
@JoinTable\cf6 (\cf7 name\cf6 =\cf8 "recipe_ingredient"\cf9 ,\
           \cf7 joinColumns \cf6 = \cf4 @JoinColumn\cf6 (\cf7 name \cf6 = \cf8 "recipe_id"\cf6 )\cf9 ,\
           \cf7 inverseJoinColumns \cf6 = \cf4 @JoinColumn\cf6 (\cf7 name \cf6 = \cf8 "ingredient_id"\cf6 ))\
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 private\cf13 \strokec13  \cf14 \strokec14 Set\cf13 \strokec13 <\cf14 \strokec14 Ingredient\cf13 \strokec13 > \cf15 \strokec15 ingredients\cf13 \strokec13 ;\cf2 \cb2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf16 \cb17 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
@ManyToMany\cf18 (\cf19 mappedBy \cf18 = \cf20 \'93ingredients\'94\cf18 )\
\cf21 private \cf18 Set<Recipe> \cf22 recipes\cf21 ;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \cb3 \
\
**How do I setup developer tools refresh on save???\
\
spring.jpa.hibernate.ddl-auto=create-drop\
\
to load data on startup, create a DataLoader class under the package bootstrap implementing the CommandLineRunner interface\
\

\f0\b @MapppedSuperClass 
\f1\b0 //Used to create a Base Entity JPA or to extend abstract
\f0\b \

\f1\b0 \
}